{"ast":null,"code":"// import userimage from \"@/assets/img/chesspieces/wikipedia/wK.png\";\nimport \"@/chessboardjs/js/chessboard\";\nimport { Chess } from 'chess.js';\nexport default {\n  name: \"Double\",\n  mounted() {\n    this.SuperPuper();\n  },\n  data() {\n    return {\n      username: '23232',\n      fen: '',\n      move: '',\n      record: false,\n      listMove: [],\n      game: '',\n      board: ''\n    };\n  },\n  watch: {\n    fen() {\n      if (this.record && this.game.turn() === 'w') {\n        this.loadListMoves(this.game.fen());\n      }\n    }\n  },\n  methods: {\n    async sendMove(u1, f1, m1, ini_fen) {\n      let data = {\n        username: u1,\n        fen: f1,\n        move: m1,\n        source_fen: ini_fen,\n        record: this.record\n      };\n      this.moveMove = await fetch(`${this.$store.getters.getServerUrl}/move/`, {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }).then(response => response.json());\n      this.record = this.moveMove['record'];\n      var movee = this.moveMove['move'];\n      movee = this.editCastleMove(movee);\n      if (this.moveMove['status'] !== 'move') {\n        this.game.reset();\n      } else {\n        var next_move = this.game.move({\n          from: movee.slice(0, 2),\n          to: movee.slice(2, 4),\n          promotion: 'q'\n        });\n        this.fen = this.game.fen();\n        this.board.position(this.game.fen());\n      }\n    },\n    async loadListMoves(f1) {\n      let data = {\n        fen: f1,\n        record: this.record\n      };\n      this.fen = f1;\n      this.listMove = [];\n      this.listMove = await fetch(`${this.$store.getters.getServerUrl}/offer/`, {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }).then(response => response.json());\n      console.log(this.listMove);\n      return this.listMove;\n    },\n    onDrop(source, target) {\n      // see if the move is legal\n      var old_fen = this.game.fen();\n      try {\n        var move = this.game.move({\n          from: source,\n          to: target,\n          promotion: 'q' // NOTE: always promote to a queen for example simplicity\n        });\n      } catch (error) {\n        move = null;\n      }\n\n      // illegal move\n      if (move === null) return 'snapback';\n      console.log(1);\n      this.sendMove('numaze', this.game.fen(), source + target, old_fen);\n      // if (this.record){\n      //   this.loadListMoves(this.game.fen())\n      // }\n\n      // updateStatus()\n    },\n\n    editCastleMove(uci) {\n      if (this.game.board()[0][4] != null && this.game.board()[0][4]['type'] === 'k' && uci === 'e8h8') {\n        uci = 'e8g8';\n      }\n      if (this.game.board()[0][4] != null && this.game.board()[0][4]['type'] === 'k' && uci === 'e8a8') {\n        uci = 'e8c8';\n      }\n      if (this.game.board()[7][4] != null && this.game.board()[0][4]['type'] === 'k' && uci === 'e1h1') {\n        uci = 'e1g1';\n      }\n      if (this.game.board()[7][4] != null && this.game.board()[0][4]['type'] === 'k' && uci === 'e1a1') {\n        uci = 'e1c1';\n      }\n      return uci;\n    },\n    SuperPuper() {\n      var board = null;\n      var game = new Chess();\n      var $status = $('#status');\n      var $fen = $('#fen');\n      var $pgn = $('#pgn');\n      function onDragStart(source, piece, position, orientation) {\n        // do not pick up pieces if the game is over\n        if (game.game_over) return false;\n\n        // only pick up pieces for the side to move\n        if (game.turn() === 'w' && piece.search(/^b/) !== -1 || game.turn() === 'b' && piece.search(/^w/) !== -1) {\n          return false;\n        }\n      }\n\n      // update the board position after the piece snap\n      // for castling, en passant, pawn promotion\n      function onSnapEnd() {\n        board.position(game.fen());\n      }\n      function updateStatus() {\n        var status = '';\n        var moveColor = 'White';\n        if (game.turn() === 'b') {\n          moveColor = 'Black';\n        }\n\n        // checkmate?\n        if (game.in_checkmate) {\n          status = 'Game over, ' + moveColor + ' is in checkmate.';\n        }\n\n        // draw?\n        else if (game.in_draw) {\n          status = 'Game over, drawn position';\n        }\n\n        // game still on\n        else {\n          status = moveColor + ' to move';\n\n          // check?\n          if (game.in_check) {\n            status += ', ' + moveColor + ' is in check';\n          }\n        }\n        $status.html(status);\n        $fen.html(game.fen());\n        $pgn.html(game.pgn());\n      }\n      var config = {\n        draggable: true,\n        position: 'start',\n        onDragStart: onDragStart,\n        onDrop: this.onDrop,\n        onSnapEnd: onSnapEnd\n      };\n      this.game = game;\n      board = Chessboard('myBoard', config);\n      this.board = board;\n      updateStatus();\n    }\n  }\n};","map":{"version":3,"mappings":"AAqCA;AACA;AACA;AACA;EACAA;EAEAC;IACA;EACA;EAEAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EAEAC;IACAN;MACA;QACA;MACA;IACA;EACA;EAEAO;IAGA;MACA;QACAR;QACAC;QACAC;QACAO;QACAN;MACA;MAEA,yEACA;QACAO;QACAC;UACA;QACA;QACAC;MAEA;MACA;MAEA;MACAC;MAEA;QAEA;MACA,OACA;QAEA;UACAC;UACAC;UACAC;QACA,EACA;QAEA;QACA;MAEA;IAEA;IAEA;MACA;QACAf;QACAE;MACA;MACA;MACA;MACA,4BACA,8CACA;QACAO;QACAC;UACA;QACA;QACAC;MAAA,EACA;MACAK;MACA;IACA;IAIAC;MACA;MACA;MACA;QACA;UACAJ;UACAC;UACAC;QACA;MACA,EACA;QACAd;MACA;;MAGA;MACA;MACAe;MACA;MACA;MACA;MACA;;MAGA;IACA;;IAGAE;MACA;QACAC;MACA;MACA;QACAA;MACA;MACA;QACAA;MACA;MACA;QACAA;MACA;MAEA;IACA;IAGAC;MAGA;MACA;MACA;MACA;MACA;MAMA;QACA;QACA;;QAEA;QACA,wDACAhB;UACA;QACA;MACA;;MAKA;MACA;MACA;QACAC;MACA;MAEA;QACA;QAEA;QACA;UACAgB;QACA;;QAEA;QACA;UACAC;QACA;;QAEA;QAAA,KACA;UACAA;QACA;;QAEA;QAAA,KACA;UACAA;;UAEA;UACA;YACAA;UACA;QACA;QAEAC;QACAC;QACAC;MACA;MAEA;QACAC;QACAC;QACAC;QACAX;QACAY;MACA;MACA;MACAxB;MACA;MACAyB;IAMA;EAEA;AAEA","names":["name","mounted","data","username","fen","move","record","listMove","game","board","watch","methods","source_fen","method","headers","body","movee","from","to","promotion","console","onDrop","editCastleMove","uci","SuperPuper","moveColor","status","$status","$fen","$pgn","draggable","position","onDragStart","onSnapEnd","updateStatus"],"sourceRoot":"src/components","sources":["Double.vue"],"sourcesContent":["<template>\n<div>\n  <div>\n    <button @click=\"this.SuperPuper\">click </button>\n  </div>\n  <div>\n  <input type=\"checkbox\" value=\"record\" id=\"checkbox\" v-model=\"record\" />\n<label for=\"checkbox\"> record </label>\n    </div>\n\n\n\n<div id=\"myBoard\" style=\"width: 300px\"></div>\n<!--  <canvas id=\"myBoard\" style=\"width: 500px\">-->\n\n<!--    </canvas>-->\n<label>Status:</label>\n<div id=\"status\"></div>\n<label>FEN:</label>\n<div id=\"fen\"></div>\n<label>PGN:</label>\n<div id=\"pgn\"></div>\n<div>\n  <ul v-if=\"this.record && this.game.turn() === 'w'\">\n    <li v-for=\"elem in this.listMove\">\n  \tMove:  {{ elem.move }},    White_win%:  {{ Math.round(elem.white_win*1000)/10 }},  appearances:  {{ elem.appearances }}, eval:  {{ elem.cp/100}}\n\t </li>\n    </ul>\n</div>\n<!--<div> <img :src=\"require('../assets/img/chesspieces/wikipedia/wR.png')\" alt=\"\" /> </div>-->\n\n  </div>\n\n</template>\n\n<script>\n\n// import userimage from \"@/assets/img/chesspieces/wikipedia/wK.png\";\nimport  \"@/chessboardjs/js/chessboard\";\n        import { Chess } from 'chess.js'\nexport default {\n  name: \"Double\",\n\n  mounted() {\n  this.SuperPuper()\n  },\n\n  data() {\n    return {\n      username: '23232',\n      fen: '',\n      move: '',\n      record: false,\n      listMove: [],\n      game: '',\n      board: '',\n    }\n    },\n\nwatch: {\n    fen(){\n      if (this.record && this.game.turn() === 'w') {\n        this.loadListMoves(this.game.fen())\n      }\n    }\n},\n\n  methods: {\n\n\n     async sendMove(u1, f1, m1, ini_fen){\n      let data = {\n        username: u1,\n        fen: f1,\n        move: m1,\n        source_fen: ini_fen,\n        record: this.record\n      }\n\n      this.moveMove = await fetch(`${this.$store.getters.getServerUrl}/move/`,\n          {\n            method: \"POST\",\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n\n      }).then(response => response.json())\n       this.record = this.moveMove['record']\n\n           var movee = this.moveMove['move']\n       movee = this.editCastleMove(movee)\n\n    if (this.moveMove['status'] !== 'move'){\n\n      this.game.reset()\n    }\n    else {\n\n      var next_move = this.game.move({\n            from: movee.slice(0, 2),\n            to: movee.slice(2, 4),\n            promotion: 'q'\n          }\n      )\n\n      this.fen = this.game.fen()\n      this.board.position(this.game.fen())\n\n    }\n\n    },\n\n    async loadListMoves(f1){\n      let data = {\n        fen: f1,\n        record: this.record\n      }\n      this.fen = f1\n      this.listMove = []\n      this.listMove = await fetch(\n          `${this.$store.getters.getServerUrl}/offer/`,\n          {\n            method: \"POST\",\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)}\n      ).then(response => response.json())\n    console.log(this.listMove)\n      return this.listMove\n    },\n\n\n\n  onDrop (source, target) {\n  // see if the move is legal\n  var old_fen = this.game.fen()\n  try {\n    var move = this.game.move({\n    from: source,\n    to: target,\n    promotion: 'q' // NOTE: always promote to a queen for example simplicity\n  })\n  }\n  catch (error){\n    move = null\n  }\n\n\n  // illegal move\n  if (move === null) return 'snapback';\n    console.log(1)\n      this.sendMove('numaze',  this.game.fen(), source+target, old_fen)\n    // if (this.record){\n    //   this.loadListMoves(this.game.fen())\n    // }\n\n\n  // updateStatus()\n},\n\n\neditCastleMove(uci){\n   if (this.game.board()[0][4]!=null && this.game.board()[0][4]['type'] === 'k' && uci === 'e8h8') {\n          uci= 'e8g8'\n       }\n   if (this.game.board()[0][4]!=null && this.game.board()[0][4]['type'] === 'k' && uci === 'e8a8') {\n          uci= 'e8c8'\n       }\n   if (this.game.board()[7][4]!=null && this.game.board()[0][4]['type'] === 'k' && uci === 'e1h1') {\n          uci= 'e1g1'\n       }\n   if (this.game.board()[7][4]!=null && this.game.board()[0][4]['type'] === 'k' && uci === 'e1a1') {\n          uci= 'e1c1'\n       }\n\n   return uci\n},\n\n\nSuperPuper(){\n\n\n    var board = null\nvar game = new Chess()\nvar $status = $('#status')\nvar $fen = $('#fen')\nvar $pgn = $('#pgn')\n\n\n\n\n\nfunction onDragStart (source, piece, position, orientation) {\n  // do not pick up pieces if the game is over\n  if (game.game_over) return false\n\n  // only pick up pieces for the side to move\n  if ((game.turn() === 'w' && piece.search(/^b/) !== -1) ||\n      (game.turn() === 'b' && piece.search(/^w/) !== -1)) {\n    return false\n  }\n}\n\n\n\n\n// update the board position after the piece snap\n// for castling, en passant, pawn promotion\nfunction onSnapEnd () {\n  board.position(game.fen())\n}\n\nfunction updateStatus () {\n  var status = ''\n\n  var moveColor = 'White'\n  if (game.turn() === 'b') {\n    moveColor = 'Black'\n  }\n\n  // checkmate?\n  if (game.in_checkmate) {\n    status = 'Game over, ' + moveColor + ' is in checkmate.'\n  }\n\n  // draw?\n  else if (game.in_draw) {\n    status = 'Game over, drawn position'\n  }\n\n  // game still on\n  else {\n    status = moveColor + ' to move'\n\n    // check?\n    if (game.in_check) {\n      status += ', ' + moveColor + ' is in check'\n    }\n  }\n\n  $status.html(status)\n  $fen.html(game.fen())\n  $pgn.html(game.pgn())\n}\n\nvar config = {\n  draggable: true,\n  position: 'start',\n  onDragStart: onDragStart,\n  onDrop: this.onDrop,\n  onSnapEnd: onSnapEnd\n}\nthis.game = game\nboard = Chessboard('myBoard', config)\nthis.board = board\nupdateStatus()\n\n\n\n\n\n}\n\n  }\n\n}\n</script>\n\n<style scoped>\n@import \"@/assets/css/chessboard-1.0.0.css\"\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}