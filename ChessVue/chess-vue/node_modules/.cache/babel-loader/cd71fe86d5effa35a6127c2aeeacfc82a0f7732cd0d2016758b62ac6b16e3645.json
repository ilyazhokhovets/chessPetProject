{"ast":null,"code":"// import userimage from \"@/assets/img/chesspieces/wikipedia/wK.png\";\nimport \"@/chessboardjs/js/chessboard\";\nimport { Chess } from 'chess.js';\nexport default {\n  name: \"Board\",\n  mounted() {\n    console.log(1);\n    var callSendMove = this.sendMove;\n    //     function onDragMove (newLocation, oldLocation, source,\n    //                      piece, position, orientation) {\n    //\n    // }\n    // function onDrop (source, target, piece, newPos, oldPos, orientation) {\n    //\n    //\n    //    callSendMove('numaze',  Chessboard.objToFen(newPos), source+target).then((newFen) => {\n    //     board.position(newFen)\n    //   })\n    //\n    //\n    // }\n    //\n    // function onChange (oldPos, newPos) {\n    //\n    // // var ruyLopez = 'r1bqkbnr/pppp1ppp/2n5/1B2p3/4P3/5N2/PPPP1PPP/RNBQK2R'\n    // //   board.position(ruyLopez)\n    // }\n    // var config = {\n    //   draggable: true,\n    //   position: 'start',\n    //   onDrop: onDrop,\n    //   onChange: onChange,\n    //   onDragMove: onDragMove,\n    // }\n    //\n    //\n    // var board = Chessboard('myBoard', config)\n\n    var board = null;\n    var game = new Chess();\n    var $status = $('#status');\n    var $fen = $('#fen');\n    var $pgn = $('#pgn');\n    function onDragStart(source, piece, position, orientation) {\n      // do not pick up pieces if the game is over\n      if (game.game_over) return false;\n\n      // only pick up pieces for the side to move\n      if (game.turn() === 'w' && piece.search(/^b/) !== -1 || game.turn() === 'b' && piece.search(/^w/) !== -1) {\n        return false;\n      }\n    }\n    function onDrop(source, target) {\n      // see if the move is legal\n      var move = game.move({\n        from: source,\n        to: target,\n        promotion: 'q' // NOTE: always promote to a queen for example simplicity\n      });\n\n      // illegal move\n      if (move === null) return 'snapback';\n      console.log(game.fen());\n      callSendMove('numaze', game.fen(), source + target).then(res_move => {\n        console.log(game.board());\n        if (game.board()[0][4]['type'] == 'k') {\n          console.log('OK');\n        }\n        var next_move = game.move({\n          from: res_move.slice(0, 2),\n          to: res_move.slice(2, 4),\n          promotion: 'q'\n        });\n        board.position(game.fen());\n      });\n      updateStatus();\n    }\n\n    // update the board position after the piece snap\n    // for castling, en passant, pawn promotion\n    function onSnapEnd() {\n      board.position(game.fen());\n    }\n    function updateStatus() {\n      var status = '';\n      var moveColor = 'White';\n      if (game.turn() === 'b') {\n        moveColor = 'Black';\n      }\n\n      // checkmate?\n      if (game.in_checkmate) {\n        status = 'Game over, ' + moveColor + ' is in checkmate.';\n      }\n\n      // draw?\n      else if (game.in_draw) {\n        status = 'Game over, drawn position';\n      }\n\n      // game still on\n      else {\n        status = moveColor + ' to move';\n\n        // check?\n        if (game.in_check) {\n          status += ', ' + moveColor + ' is in check';\n        }\n      }\n      $status.html(status);\n      $fen.html(game.fen());\n      $pgn.html(game.pgn());\n    }\n    var config = {\n      draggable: true,\n      position: 'start',\n      onDragStart: onDragStart,\n      onDrop: onDrop,\n      onSnapEnd: onSnapEnd\n    };\n    board = Chessboard('myBoard', config);\n    updateStatus();\n  },\n  data() {\n    return {\n      username: '23232',\n      fen: '',\n      move: ''\n    };\n  },\n  created() {\n\n    // this.loadListMove()\n    // console.log(this.moveve)\n  },\n  // methods: {\n  //     async loadListMove(){\n  //       this.moveMove = await fetch(\n  //           `${this.$store.getters.getServerUrl}/move`\n  //       ).then(response => response.json())\n  //       return this.moveMove\n  //     }\n  // }\n  methods: {\n    async sendMove(u1, f1, m1) {\n      let data = {\n        username: u1,\n        fen: f1,\n        move: m1\n      };\n      this.moveMove = await fetch(`${this.$store.getters.getServerUrl}/move/`, {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }).then(response => response.json());\n      console.log(this.moveMove.move);\n      return this.moveMove.move;\n    }\n  }\n};","map":{"version":3,"mappings":"AAmBA;AACA;AACA;AAEA;EACAA;EAEAC;IACAC;IACA;IACA;IACA;;IAEA;IACA;;;IAGA;IACA;IACA;;;IAGA;;IAEA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;;IAGA;;IAIA;IACA;IACA;IACA;IACA;IAEA;MACA;MACA;;MAEA;MACA,wDACAC;QACA;MACA;IACA;IAEA;MACA;MACA;QACAC;QACAC;QACAC;MACA;;MAEA;MACA;MACAJ;MACAK;QACAL;QACA;UACAA;QACA;QACA;UACAE;UACAC;UACAC;QACA,EACA;QACAE;MACA;MACAC;IACA;;IAEA;IACA;IACA;MACAD;IACA;IAEA;MACA;MAEA;MACA;QACAE;MACA;;MAEA;MACA;QACAC;MACA;;MAEA;MAAA,KACA;QACAA;MACA;;MAEA;MAAA,KACA;QACAA;;QAEA;QACA;UACAA;QACA;MACA;MAEAC;MACAC;MACAC;IACA;IAEA;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;IACAX;IAEAC;EAEA;EAEAW;IACA;MACAC;MACAC;MACAC;IACA;EACA;EACAC;;IAEA;IACA;EAAA,CACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC;IACA;MACA;QACAJ;QACAC;QACAC;MACA;MACA,yEACA;QACAG;QACAC;UACA;QACA;QACAC;MAEA;MACA1B;MACA;IAGA;EACA;AAEA","names":["name","mounted","console","game","from","to","promotion","callSendMove","board","updateStatus","moveColor","status","$status","$fen","$pgn","draggable","position","onDragStart","onDrop","onSnapEnd","data","username","fen","move","created","methods","method","headers","body"],"sourceRoot":"src/components","sources":["Board.vue"],"sourcesContent":["<template>\n<div>\n<!--<div id=\"myBoard\" style=\"width: 400px\"></div>-->\n  <div id=\"myBoard\" style=\"width: 500px\"></div>\n<label>Status:</label>\n<div id=\"status\"></div>\n<label>FEN:</label>\n<div id=\"fen\"></div>\n<label>PGN:</label>\n<div id=\"pgn\"></div>\n\n<div> <img :src=\"require('../assets/img/chesspieces/wikipedia/wR.png')\" alt=\"\" /> </div>\n\n  </div>\n\n</template>\n\n<script>\n\n// import userimage from \"@/assets/img/chesspieces/wikipedia/wK.png\";\nimport \"@/chessboardjs/js/chessboard\";\nimport { Chess } from 'chess.js'\n\nexport default {\n  name: \"Board\",\n\n  mounted() {\n    console.log(1)\n    var callSendMove = this.sendMove\n//     function onDragMove (newLocation, oldLocation, source,\n//                      piece, position, orientation) {\n//\n// }\n// function onDrop (source, target, piece, newPos, oldPos, orientation) {\n//\n//\n//    callSendMove('numaze',  Chessboard.objToFen(newPos), source+target).then((newFen) => {\n//     board.position(newFen)\n//   })\n//\n//\n// }\n//\n// function onChange (oldPos, newPos) {\n//\n// // var ruyLopez = 'r1bqkbnr/pppp1ppp/2n5/1B2p3/4P3/5N2/PPPP1PPP/RNBQK2R'\n// //   board.position(ruyLopez)\n// }\n// var config = {\n//   draggable: true,\n//   position: 'start',\n//   onDrop: onDrop,\n//   onChange: onChange,\n//   onDragMove: onDragMove,\n// }\n//\n//\n// var board = Chessboard('myBoard', config)\n\n\n\n    var board = null\nvar game = new Chess()\nvar $status = $('#status')\nvar $fen = $('#fen')\nvar $pgn = $('#pgn')\n\nfunction onDragStart (source, piece, position, orientation) {\n  // do not pick up pieces if the game is over\n  if (game.game_over) return false\n\n  // only pick up pieces for the side to move\n  if ((game.turn() === 'w' && piece.search(/^b/) !== -1) ||\n      (game.turn() === 'b' && piece.search(/^w/) !== -1)) {\n    return false\n  }\n}\n\nfunction onDrop (source, target) {\n  // see if the move is legal\n  var move = game.move({\n    from: source,\n    to: target,\n    promotion: 'q' // NOTE: always promote to a queen for example simplicity\n  })\n\n  // illegal move\n  if (move === null) return 'snapback';\n  console.log(game.fen())\n     callSendMove('numaze',  game.fen(), source+target).then((res_move) => {\n       console.log(game.board())\n       if (game.board()[0][4]['type'] == 'k') {\n         console.log('OK')\n       }\n    var next_move = game.move({\n        from: res_move.slice(0,2),\n        to: res_move.slice(2,4),\n        promotion: 'q'\n        }\n    )\n  board.position(game.fen())\n  })\n  updateStatus()\n}\n\n// update the board position after the piece snap\n// for castling, en passant, pawn promotion\nfunction onSnapEnd () {\n  board.position(game.fen())\n}\n\nfunction updateStatus () {\n  var status = ''\n\n  var moveColor = 'White'\n  if (game.turn() === 'b') {\n    moveColor = 'Black'\n  }\n\n  // checkmate?\n  if (game.in_checkmate) {\n    status = 'Game over, ' + moveColor + ' is in checkmate.'\n  }\n\n  // draw?\n  else if (game.in_draw) {\n    status = 'Game over, drawn position'\n  }\n\n  // game still on\n  else {\n    status = moveColor + ' to move'\n\n    // check?\n    if (game.in_check) {\n      status += ', ' + moveColor + ' is in check'\n    }\n  }\n\n  $status.html(status)\n  $fen.html(game.fen())\n  $pgn.html(game.pgn())\n}\n\nvar config = {\n  draggable: true,\n  position: 'start',\n  onDragStart: onDragStart,\n  onDrop: onDrop,\n  onSnapEnd: onSnapEnd\n}\nboard = Chessboard('myBoard', config)\n\nupdateStatus()\n\n  },\n\n  data() {\n    return {\n      username: '23232',\n      fen: '',\n      move: '',\n    }\n    },\ncreated() {\n\n// this.loadListMove()\n// console.log(this.moveve)\n      },\n\n      // methods: {\n      //     async loadListMove(){\n      //       this.moveMove = await fetch(\n      //           `${this.$store.getters.getServerUrl}/move`\n      //       ).then(response => response.json())\n      //       return this.moveMove\n      //     }\n      // }\n  methods: {\n     async sendMove(u1, f1, m1){\n      let data = {\n        username: u1,\n        fen: f1,\n        move: m1\n      }\n      this.moveMove = await fetch(`${this.$store.getters.getServerUrl}/move/`,\n          {\n            method: \"POST\",\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n\n      }).then(response => response.json())\n       console.log(this.moveMove.move)\n       return this.moveMove.move\n\n\n    }\n  }\n\n}\n</script>\n\n<style scoped>\n@import \"@/assets/css/chessboard-1.0.0.css\"\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}