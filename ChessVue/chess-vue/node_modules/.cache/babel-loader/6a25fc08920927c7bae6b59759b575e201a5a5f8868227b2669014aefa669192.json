{"ast":null,"code":"// import userimage from \"@/assets/img/chesspieces/wikipedia/wK.png\";\nimport \"@/chessboardjs/js/chessboard\";\nimport { Chess } from 'chess.js';\nexport default {\n  name: \"Board\",\n  mounted() {\n    var callSendMove = this.sendMove;\n    var kek = this.loadListMoves;\n    var board = null;\n    var game = new Chess();\n    var $status = $('#status');\n    var $fen = $('#fen');\n    var $pgn = $('#pgn');\n    function editCastleMove(uci) {\n      if (game.board()[0][4] != null && game.board()[0][4]['type'] === 'k' && uci === 'e8h8') {\n        uci = 'e8g8';\n      }\n      if (game.board()[0][4] != null && game.board()[0][4]['type'] === 'k' && uci === 'e8a8') {\n        uci = 'e8c8';\n      }\n      if (game.board()[7][4] != null && game.board()[0][4]['type'] === 'k' && uci === 'e1h1') {\n        uci = 'e1g1';\n      }\n      if (game.board()[7][4] != null && game.board()[0][4]['type'] === 'k' && uci === 'e1a1') {\n        uci = 'e1c1';\n      }\n      return uci;\n    }\n    function onDragStart(source, piece, position, orientation) {\n      // do not pick up pieces if the game is over\n      if (game.game_over) return false;\n\n      // only pick up pieces for the side to move\n      if (game.turn() === 'w' && piece.search(/^b/) !== -1 || game.turn() === 'b' && piece.search(/^w/) !== -1) {\n        return false;\n      }\n    }\n    function onDrop(source, target) {\n      // see if the move is legal\n      var old_fen = game.fen();\n      try {\n        var move = game.move({\n          from: source,\n          to: target,\n          promotion: 'q' // NOTE: always promote to a queen for example simplicity\n        });\n      } catch (error) {\n        move = null;\n      }\n      console.log(this.data().record);\n\n      // illegal move\n      if (move === null) return 'snapback';\n      callSendMove('numaze', game.fen(), source + target, old_fen).then(res_move => {\n        var movee = res_move['move'];\n        movee = editCastleMove(movee);\n        console.log(res_move);\n        if (res_move['status'] !== 'move') {\n          game.reset();\n        } else {\n          var next_move = game.move({\n            from: movee.slice(0, 2),\n            to: movee.slice(2, 4),\n            promotion: 'q'\n          });\n          kek(game.fen());\n          board.position(game.fen());\n        }\n      });\n      updateStatus();\n    }\n\n    // update the board position after the piece snap\n    // for castling, en passant, pawn promotion\n    function onSnapEnd() {\n      board.position(game.fen());\n    }\n    function updateStatus() {\n      var status = '';\n      var moveColor = 'White';\n      if (game.turn() === 'b') {\n        moveColor = 'Black';\n      }\n\n      // checkmate?\n      if (game.in_checkmate) {\n        status = 'Game over, ' + moveColor + ' is in checkmate.';\n      }\n\n      // draw?\n      else if (game.in_draw) {\n        status = 'Game over, drawn position';\n      }\n\n      // game still on\n      else {\n        status = moveColor + ' to move';\n\n        // check?\n        if (game.in_check) {\n          status += ', ' + moveColor + ' is in check';\n        }\n      }\n      $status.html(status);\n      $fen.html(game.fen());\n      $pgn.html(game.pgn());\n    }\n    var config = {\n      draggable: true,\n      position: 'start',\n      onDragStart: onDragStart,\n      onDrop: onDrop,\n      onSnapEnd: onSnapEnd\n    };\n    board = Chessboard('myBoard', config);\n    updateStatus();\n  },\n  data() {\n    return {\n      username: '23232',\n      fen1: '',\n      move: '',\n      record: false,\n      listMove: []\n    };\n  },\n  methods: {\n    async sendMove(u1, f1, m1, ini_fen) {\n      let data = {\n        username: u1,\n        fen: f1,\n        move: m1,\n        source_fen: ini_fen,\n        record: this.record\n      };\n      console.log('move');\n      this.moveMove = await fetch(`${this.$store.getters.getServerUrl}/move/`, {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }).then(response => response.json());\n      this.record = this.moveMove['record'];\n      return this.moveMove;\n    },\n    async loadListMoves(f1) {\n      let data = {\n        fen: f1,\n        record: this.record\n      };\n      console.log('list');\n      this.listMove = [];\n      this.listMove = await fetch(`${this.$store.getters.getServerUrl}/offer/`, {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }).then(response => response.json());\n      console.log(this.listMove);\n    }\n  }\n};","map":{"version":3,"mappings":"AAgCA;AACA;AACA;AACA;EACAA;EAEAC;IAEA;IACA;IAGA;IACA;IACA;IACA;IACA;IAIA;MACA;QACAC;MACA;MACA;QACAA;MACA;MACA;QACAA;MACA;MACA;QACAA;MACA;MACA;IACA;IAGA;MACA;MACA;;MAEA;MACA,wDACAC;QACA;MACA;IACA;IAEA;MACA;MACA;MACA;QACA;UACAC;UACAC;UACAC;QACA;MACA,EACA;QACAC;MACA;MACAC;;MAEA;MACA;MAEAC;QAEA;QACAC;QACAF;QACA;UAEAL;QACA,OACA;UAEA;YACAC;YACAC;YACAC;UACA,EACA;UAEAK;UACAC;QACA;MACA,EACA;MAEAC;IACA;;IAEA;IACA;IACA;MACAD;IACA;IAEA;MACA;MAEA;MACA;QACAE;MACA;;MAEA;MACA;QACAC;MACA;;MAEA;MAAA,KACA;QACAA;MACA;;MAEA;MAAA,KACA;QACAA;;QAEA;QACA;UACAA;QACA;MACA;MAEAC;MACAC;MACAC;IACA;IAEA;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;IACAX;IAEAC;EAEA;EAEAW;IACA;MACAC;MACAC;MACAnB;MACAoB;MACAC;IACA;EACA;EAIAC;IACA;MACA;QACAJ;QACAK;QACAvB;QACAwB;QACAJ;MACA;MACAnB;MACA,yEACA;QACAwB;QACAC;UACA;QACA;QACAC;MAEA;MACA;MACA;IACA;IAEA;MACA;QACAJ;QACAH;MACA;MACAnB;MACA;MACA,4BACA,8CACA;QACAwB;QACAC;UACA;QACA;QACAC;MAAA,EACA;MACA1B;IACA;EAEA;AAEA","names":["name","mounted","uci","game","from","to","promotion","move","console","callSendMove","movee","kek","board","updateStatus","moveColor","status","$status","$fen","$pgn","draggable","position","onDragStart","onDrop","onSnapEnd","data","username","fen1","record","listMove","methods","fen","source_fen","method","headers","body"],"sourceRoot":"src/components","sources":["Board.vue"],"sourcesContent":["<template>\n<div>\n  <div>\n  <input type=\"checkbox\" value=\"record\" id=\"checkbox\" v-model=\"record\" />\n<label for=\"checkbox\"> record </label>\n    </div>\n\n\n\n<div id=\"myBoard\" style=\"width: 600px\"></div>\n<!--  <canvas id=\"myBoard\" style=\"width: 500px\">-->\n\n<!--    </canvas>-->\n<label>Status:</label>\n<div id=\"status\"></div>\n<label>FEN:</label>\n<div id=\"fen\"></div>\n<label>PGN:</label>\n<div id=\"pgn\"></div>\n<div>\n    <li v-for=\"elem in listMove\">\n  \tMove:  {{ elem.move }},    White_win%:  {{ Math.round(elem.white_win*1000)/10 }},  appearances:  {{ elem.appearances }}, eval:  {{ elem.cp/100}}\n\t </li>\n</div>\n<!--<div> <img :src=\"require('../assets/img/chesspieces/wikipedia/wR.png')\" alt=\"\" /> </div>-->\n\n  </div>\n\n</template>\n\n<script>\n\n// import userimage from \"@/assets/img/chesspieces/wikipedia/wK.png\";\nimport \"@/chessboardjs/js/chessboard\";\nimport { Chess } from 'chess.js'\nexport default {\n  name: \"Board\",\n\n  mounted() {\n\n    var callSendMove = this.sendMove\n    var kek = this.loadListMoves\n\n\n    var board = null\nvar game = new Chess()\nvar $status = $('#status')\nvar $fen = $('#fen')\nvar $pgn = $('#pgn')\n\n\n\nfunction editCastleMove(uci){\n   if (game.board()[0][4]!=null && game.board()[0][4]['type'] === 'k' && uci === 'e8h8') {\n          uci= 'e8g8'\n       }\n   if (game.board()[0][4]!=null && game.board()[0][4]['type'] === 'k' && uci === 'e8a8') {\n          uci= 'e8c8'\n       }\n   if (game.board()[7][4]!=null && game.board()[0][4]['type'] === 'k' && uci === 'e1h1') {\n          uci= 'e1g1'\n       }\n   if (game.board()[7][4]!=null && game.board()[0][4]['type'] === 'k' && uci === 'e1a1') {\n          uci= 'e1c1'\n       }\n   return uci\n}\n\n\nfunction onDragStart (source, piece, position, orientation) {\n  // do not pick up pieces if the game is over\n  if (game.game_over) return false\n\n  // only pick up pieces for the side to move\n  if ((game.turn() === 'w' && piece.search(/^b/) !== -1) ||\n      (game.turn() === 'b' && piece.search(/^w/) !== -1)) {\n    return false\n  }\n}\n\nfunction onDrop (source, target) {\n  // see if the move is legal\n  var old_fen = game.fen()\n  try {\n    var move = game.move({\n    from: source,\n    to: target,\n    promotion: 'q' // NOTE: always promote to a queen for example simplicity\n  })\n  }\n  catch (error){\n    move = null\n  }\n  console.log(this.data().record)\n\n  // illegal move\n  if (move === null) return 'snapback';\n\n     callSendMove('numaze',  game.fen(), source+target, old_fen).then((res_move) => {\n\n       var movee = res_move['move']\n       movee = editCastleMove(movee)\n    console.log(res_move)\n    if (res_move['status'] !== 'move'){\n\n      game.reset()\n    }\n    else {\n\n      var next_move = game.move({\n            from: movee.slice(0, 2),\n            to: movee.slice(2, 4),\n            promotion: 'q'\n          }\n      )\n\n      kek(game.fen())\n      board.position(game.fen())\n    }\n  }\n  )\n\n  updateStatus()\n}\n\n// update the board position after the piece snap\n// for castling, en passant, pawn promotion\nfunction onSnapEnd () {\n  board.position(game.fen())\n}\n\nfunction updateStatus () {\n  var status = ''\n\n  var moveColor = 'White'\n  if (game.turn() === 'b') {\n    moveColor = 'Black'\n  }\n\n  // checkmate?\n  if (game.in_checkmate) {\n    status = 'Game over, ' + moveColor + ' is in checkmate.'\n  }\n\n  // draw?\n  else if (game.in_draw) {\n    status = 'Game over, drawn position'\n  }\n\n  // game still on\n  else {\n    status = moveColor + ' to move'\n\n    // check?\n    if (game.in_check) {\n      status += ', ' + moveColor + ' is in check'\n    }\n  }\n\n  $status.html(status)\n  $fen.html(game.fen())\n  $pgn.html(game.pgn())\n}\n\nvar config = {\n  draggable: true,\n  position: 'start',\n  onDragStart: onDragStart,\n  onDrop: onDrop,\n  onSnapEnd: onSnapEnd\n}\nboard = Chessboard('myBoard', config)\n\nupdateStatus()\n\n  },\n\n  data() {\n    return {\n      username: '23232',\n      fen1: '',\n      move: '',\n      record: false,\n      listMove: [],\n    }\n    },\n\n\n\n  methods: {\n     async sendMove(u1, f1, m1, ini_fen){\n      let data = {\n        username: u1,\n        fen: f1,\n        move: m1,\n        source_fen: ini_fen,\n        record: this.record\n      }\n      console.log('move')\n      this.moveMove = await fetch(`${this.$store.getters.getServerUrl}/move/`,\n          {\n            method: \"POST\",\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n\n      }).then(response => response.json())\n       this.record = this.moveMove['record']\n       return this.moveMove\n    },\n\n    async loadListMoves(f1){\n      let data = {\n        fen: f1,\n        record: this.record\n      }\n      console.log('list')\n      this.listMove = []\n      this.listMove = await fetch(\n          `${this.$store.getters.getServerUrl}/offer/`,\n          {\n            method: \"POST\",\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)}\n      ).then(response => response.json())\n      console.log(this.listMove)\n    }\n\n  }\n\n}\n</script>\n\n<style scoped>\n@import \"@/assets/css/chessboard-1.0.0.css\"\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}