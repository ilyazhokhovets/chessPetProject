{"ast":null,"code":"// import userimage from \"@/assets/img/chesspieces/wikipedia/wK.png\";\nimport \"@/chessboardjs/js/chessboard\";\nimport { Chess } from 'chess.js';\nimport Settings from \"@/components/Settings\";\nexport default {\n  name: \"Socket\",\n  components: {\n    Settings\n  },\n  created() {\n    this.connect();\n  },\n  mounted() {\n    this.SuperPuper();\n  },\n  data() {\n    return {\n      username: '23232',\n      source_fen: '',\n      new_fen: '',\n      move_uci: '',\n      who_moved: '',\n      record: false,\n      listMove: [],\n      game: '',\n      board: '',\n      color: 'w',\n      status: 'disconnected',\n      settings: '',\n      cp: ''\n    };\n  },\n  watch: {\n    move_uci() {\n      if (this.record && this.game.turn() === 'w') {\n        this.loadListMoves(this.game.fen());\n      }\n    }\n  },\n  methods: {\n    reset() {\n      let fen = this.$store.getters.getSettings;\n      this.game.load(fen.startingFen);\n      this.board.position(this.game.fen());\n      this.record = false;\n    },\n    hint() {\n      var g = this.$store.getters.getSettings;\n      console.log(g);\n    },\n    flipBoard() {\n      this.board.flip();\n      console.log(Object.getOwnPropertyNames(this.board));\n      console.log(this.board.orientation());\n      this.reset();\n    },\n    compMove(move_uci) {\n      var next_move = this.game.move({\n        from: move_uci.slice(0, 2),\n        to: move_uci.slice(2, 4),\n        promotion: 'q'\n      });\n      this.fen = this.game.fen();\n      this.board.position(this.game.fen());\n    },\n    onDrop(source, target) {\n      // see if the move is legal\n      this.source_fen = this.game.fen();\n      try {\n        var move = this.game.move({\n          from: source,\n          to: target,\n          promotion: 'q' // NOTE: always promote to a queen for example simplicity\n        });\n      } catch (error) {\n        move = null;\n      }\n\n      // illegal move\n      if (move === null) return 'snapback';\n      this.new_fen = this.game.fen();\n      this.move_uci = source + target;\n      this.sendMove();\n    },\n    editCastleMove(uci) {\n      if (this.game.board()[0][4] != null && this.game.board()[0][4]['type'] === 'k' && uci === 'e8h8') {\n        uci = 'e8g8';\n      }\n      if (this.game.board()[0][4] != null && this.game.board()[0][4]['type'] === 'k' && uci === 'e8a8') {\n        uci = 'e8c8';\n      }\n      if (this.game.board()[7][4] != null && this.game.board()[0][4]['type'] === 'k' && uci === 'e1h1') {\n        uci = 'e1g1';\n      }\n      if (this.game.board()[7][4] != null && this.game.board()[0][4]['type'] === 'k' && uci === 'e1a1') {\n        uci = 'e1c1';\n      }\n      return uci;\n    },\n    SuperPuper() {\n      var board = null;\n      var game = new Chess();\n      function onDragStart(source, piece, position, orientation) {\n        // do not pick up pieces if the game is over\n        if (game.game_over) return false;\n\n        // only pick up pieces for the side to move\n        if (game.turn() === 'w' && piece.search(/^b/) !== -1 || game.turn() === 'b' && piece.search(/^w/) !== -1) {\n          return false;\n        }\n      }\n\n      // update the board position after the piece snap\n      // for castling, en passant, pawn promotion\n      function onSnapEnd() {\n        board.position(game.fen());\n      }\n      var config = {\n        draggable: true,\n        position: 'start',\n        onDragStart: onDragStart,\n        onDrop: this.onDrop,\n        onSnapEnd: onSnapEnd\n      };\n      this.game = game;\n      board = Chessboard('myBoard', config);\n      this.board = board;\n    },\n    connect() {\n      this.chessSocket = new WebSocket('ws://' + '127.0.0.1:8000/ws/chess/');\n      this.chessSocket.onopen = () => {\n        this.status = \"connected\";\n      };\n      this.chessSocket.onmessage = ({\n        data\n      }) => {\n        this.getMove(data);\n        this.getCP(data);\n      };\n    },\n    getMove(data) {\n      var recieved_data = JSON.parse(data);\n      if (recieved_data.status === 'move') {\n        this.record = recieved_data.record;\n        this.source_fen = this.new_fen;\n        this.compMove(recieved_data.move_uci);\n        this.new_fen = this.game.fen();\n        this.who_moved = 'comp';\n      } else {\n        this.reset();\n      }\n    },\n    getCP(data) {\n      var recieved_data = JSON.parse(data);\n      this.cp = recieved_data.cp;\n    },\n    sendMove() {\n      let data = {\n        action: 'sendMove',\n        fen: this.new_fen,\n        move: this.move_uci,\n        source_fen: this.source_fen,\n        record: this.record,\n        settings: this.$store.getters.getSettings\n      };\n      // console.log(this.message)\n      this.chessSocket.send(JSON.stringify(data));\n    }\n  }\n};","map":{"version":3,"mappings":"AAyBA;AACA;AACA;AACA;AACA;EACAA;EACAC;IACAC;EACA;EACAC;IACA;EACA;EACAC;IACA;EACA;EAEAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EAEAC;IACAV;MACA;QACA;MACA;IACA;EAEA;EAEAW;IACAC;MACA;MACA;MACA;MACA;IACA;IACAC;MACA;MACAC;IACA;IACAC;MACA;MACAD;MACAA;MACA;IACA;IACAE;MACA;QACAC;QACAC;QACAC;MACA;MACA;MACA;IACA;IAEAC;MACA;MACA;MACA;QACA;UACAH;UACAC;UACAC;QACA;MACA,EACA;QACAE;MACA;;MAEA;MACA;MACA;MACA;MACA;IACA;IAGAC;MACA;QACAC;MACA;MACA;QACAA;MACA;MACA;QACAA;MACA;MACA;QACAA;MACA;MAEA;IACA;IAGAC;MAGA;MACA;MAIA;QACA;QACA;;QAEA;QACA,wDACApB;UACA;QACA;MACA;;MAKA;MACA;MACA;QACAC;MACA;MAGA;QACAoB;QACAC;QACAC;QACAP;QACAQ;MACA;MAEA;MACAvB;MACA;IAEA;IAGAwB;MACA,iCACA,qCACA;MACA;QACA;MACA;MAEA;QAAAjC;MAAA;QAEA;QACA;MAEA;IAEA;IACAkC;MACA;MACA;QACA;QACA;QACA;QACA;QACA;MACA;QACA;MACA;IACA;IACAC;MACA;MACA;IACA;IAGAC;MACA;QACAC;QACAC;QACAb;QACAvB;QACAI;QACAM;MACA;MACA;MACA;IACA;EAEA;AAIA","names":["name","components","Settings","created","mounted","data","username","source_fen","new_fen","move_uci","who_moved","record","listMove","game","board","color","status","settings","cp","watch","methods","reset","hint","console","flipBoard","compMove","from","to","promotion","onDrop","move","editCastleMove","uci","SuperPuper","draggable","position","onDragStart","onSnapEnd","connect","getMove","getCP","sendMove","action","fen"],"sourceRoot":"src/components","sources":["Socket.vue"],"sourcesContent":["<template>\n<div>\n<!--  <div>-->\n<!--    <button @click=\"this.SuperPuper\">click </button>-->\n<!--  </div>-->\n  <div>\n  <input type=\"checkbox\" value=\"record\" id=\"checkbox\" v-model=\"record\" />\n<label for=\"checkbox\"> record </label>\n    </div>\n  <div>\n    {{this.cp}}\n  </div>\n\n\n\n<div id=\"myBoard\" style=\"width: 400px\"></div>\n<button @click=\"flipBoard\">Перевернуть доску</button> <br>\n  <button :disabled=\"record\" @click=\"hint\">Подсказка</button> <br>\n  <button @click=\"reset\">Начать заново</button>\n  </div>\n\n</template>\n\n<script>\n\n// import userimage from \"@/assets/img/chesspieces/wikipedia/wK.png\";\nimport  \"@/chessboardjs/js/chessboard\";\n        import { Chess } from 'chess.js'\nimport Settings from \"@/components/Settings\";\nexport default {\n  name: \"Socket\",\n  components: {\n    Settings\n  },\n  created() {\n    this.connect()\n  },\n  mounted() {\n  this.SuperPuper()\n  },\n\n  data() {\n    return {\n      username: '23232',\n      source_fen: '',\n      new_fen: '',\n      move_uci: '',\n      who_moved: '',\n      record: false,\n      listMove: [],\n      game: '',\n      board: '',\n      color: 'w',\n      status: 'disconnected',\n      settings: '',\n      cp: ''\n    }\n    },\n\nwatch: {\n    move_uci(){\n      if (this.record && this.game.turn() === 'w') {\n        this.loadListMoves(this.game.fen())\n      }\n    }\n\n},\n\n  methods: {\n    reset (){\n      let fen = this.$store.getters.getSettings\n      this.game.load(fen.startingFen)\n      this.board.position(this.game.fen())\n      this.record = false\n    },\n    hint (){\n    var g = this.$store.getters.getSettings\n      console.log(g)\n    },\n    flipBoard(){\n      this.board.flip()\n      console.log(Object.getOwnPropertyNames(this.board))\n      console.log(this.board.orientation())\n      this.reset()\n    },\n  compMove (move_uci){\n     var next_move = this.game.move({\n            from: move_uci.slice(0, 2),\n            to: move_uci.slice(2, 4),\n            promotion: 'q'\n          })\n      this.fen = this.game.fen()\n      this.board.position(this.game.fen())\n    },\n\n  onDrop (source, target) {\n  // see if the move is legal\n  this.source_fen = this.game.fen()\n  try {\n    var move = this.game.move({\n    from: source,\n    to: target,\n    promotion: 'q' // NOTE: always promote to a queen for example simplicity\n  })\n  }\n  catch (error){\n    move = null\n  }\n\n  // illegal move\n  if (move === null) return 'snapback';\n  this.new_fen = this.game.fen()\n  this.move_uci = source+target\n  this.sendMove()\n},\n\n\neditCastleMove(uci){\n   if (this.game.board()[0][4]!=null && this.game.board()[0][4]['type'] === 'k' && uci === 'e8h8') {\n          uci= 'e8g8'\n       }\n   if (this.game.board()[0][4]!=null && this.game.board()[0][4]['type'] === 'k' && uci === 'e8a8') {\n          uci= 'e8c8'\n       }\n   if (this.game.board()[7][4]!=null && this.game.board()[0][4]['type'] === 'k' && uci === 'e1h1') {\n          uci= 'e1g1'\n       }\n   if (this.game.board()[7][4]!=null && this.game.board()[0][4]['type'] === 'k' && uci === 'e1a1') {\n          uci= 'e1c1'\n       }\n\n   return uci\n},\n\n\nSuperPuper(){\n\n\n  var board = null\nvar game = new Chess()\n\n\n\nfunction onDragStart (source, piece, position, orientation) {\n  // do not pick up pieces if the game is over\n  if (game.game_over) return false\n\n  // only pick up pieces for the side to move\n  if ((game.turn() === 'w' && piece.search(/^b/) !== -1) ||\n      (game.turn() === 'b' && piece.search(/^w/) !== -1)) {\n    return false\n  }\n}\n\n\n\n\n// update the board position after the piece snap\n// for castling, en passant, pawn promotion\nfunction onSnapEnd () {\n  board.position(game.fen())\n}\n\n\nvar config = {\n  draggable: true,\n  position: 'start',\n  onDragStart: onDragStart,\n  onDrop: this.onDrop,\n  onSnapEnd: onSnapEnd\n}\n\nthis.game = game\nboard = Chessboard('myBoard', config)\nthis.board = board\n\n},\n\n\n    connect() {\n      this.chessSocket = new WebSocket(\n          'ws://' + '127.0.0.1:8000/ws/chess/'\n      );\n      this.chessSocket.onopen = () => {\n        this.status = \"connected\";\n      }\n\n      this.chessSocket.onmessage = ({data}) => {\n\n     this.getMove(data)\n      this.getCP(data)\n\n    }\n\n    },\n    getMove(data){\n var recieved_data = JSON.parse(data)\n        if (recieved_data.status === 'move') {\n          this.record = recieved_data.record\n        this.source_fen = this.new_fen\n        this.compMove(recieved_data.move_uci)\n        this.new_fen = this.game.fen()\n        this.who_moved = 'comp'\n        } else {\n          this.reset()\n        }\n    },\n    getCP(data){\n      var recieved_data = JSON.parse(data)\n      this.cp = recieved_data.cp\n    },\n\n\n    sendMove (){\n       let data = {\n         action: 'sendMove',\n        fen: this.new_fen,\n        move: this.move_uci,\n        source_fen: this.source_fen,\n        record: this.record,\n         settings: this.$store.getters.getSettings\n      }\n      // console.log(this.message)\n      this.chessSocket.send(JSON.stringify(data))\n    },\n\n  }\n\n\n\n}\n</script>\n\n<style scoped>\n@import \"@/assets/css/chessboard-1.0.0.css\"\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}